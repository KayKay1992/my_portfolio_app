CREATING SLICE FOR OUR BLOG. AND CREATING OUR BLOG PAGE

In our prismic project page type we added another slice in our page and call it ContentIndex.

In this slice we added some fields which include
text- heading
select - content type
RichText - description
text - view more text
image - fall back image.
* Then we save the changes and push it.

* then we create a new page for contentIndex and call it the blog, click add slice and add the contentIndex slice, then input what you want to appear there. then save and publish. when you check localhost:3000/blog you will see the place holder.

* To add the link to your navbar, go to prismic=> setting page=> add nav link => from prismic select blog, give it a name save and publish.

*in contentIndex folder, we edidted the index.tsx to what we want.
*create a new file component contentlist and pass it to your contentIndex index.tsx file.
* In your prismic create a reusable page type for your blog post content, name it blog post the  create a slice, we called it TextBlock then in the slice we will add some field which include text, image and date then push the changes. 
* Create another reusable page for project instead of creating from scratch select the text block from the reusable slice. then we added the same field as in block. Then we save and publish.
* So to create a blog post, click create page then select blog post fill the fields then save and publish.
* Then we create a project and and save it


EXPLAININING CONTENTLIST COMPONENT FILE 
1. **Component Purpose**: Renders a list of blog posts or projects with titles, tags, and links.  
2. **Props**: Accepts `items` (content documents), `contentType` (to determine URL path), `fallbackItemImage`, and `viewMoreText`.  
3. **URL Handling**: Uses `contentType` to set the URL prefix (`/blog` or `/project`).  
4. **List Structure**: Maps over `items` to create a `<ul>` list with border styling.  
5. **Unique Keys**: Uses `item.uid` as React keys for stable list rendering.  
6. **Title Check**: Verifies the title exists with `isFilled.keyText` before rendering.  
7. **Link Setup**: Each item links to its detail page (`urlPrefix + "/" + item.uid`).  
8. **Content Layout**: Flex layout for title (large font) and tags (yellow, bold).  
9. **Tags**: Maps tags with composite keys (`${item.uid}-tag-${index}`) to avoid duplicates.  
10. **Call-to-Action**: Shows "Read More" (or custom text) with an arrow icon on the right.  

**Bonus**: Type-safe with Prismic and Next.js, ensuring clean and maintainable code.

EXPLAINING CONTENTINDEX INDEX.TSX FILE
1. **Component Type**: A Next.js/Prismic *Slice* component (`ContentIndex`) that dynamically renders content based on Prismic CMS data.  
2. **Data Fetching**: Uses `createClient()` to fetch all `blog_post` and `project` documents from Prismic.  
3. **Content Type**: Determines displayed content (`Blog` or `Project`) via `slice.primary.content_type` (default: `Blog`).  
4. **Dynamic Items**: Selects `items` (blog posts or projects) based on the `contentType`.  
5. **Layout**: Wraps content in a `Bounded` component for consistent width and spacing.  
6. **Heading**: Displays a title from `slice.primary.heading` using a custom `Heading` component.  
7. **Optional Description**: Conditionally renders a rich-text description if it exists in Prismic.  
8. **ContentList**: Passes fetched `items`, `contentType`, and CMS-defined labels (`view_more_text`, `fallback_item_image`) to the `ContentList` component.  
9. **Prismic Integration**: Uses `SliceComponentProps` for type safety and `PrismicRichText` for rich-text fields.  
10. **Async Ready**: Marked `async` to support server-side data fetching in Next.js.  

**Key Purpose**: Dynamically renders a content index (blogs/projects) with configurable headings, descriptions, and layouts via Prismic CMS.