Here are **five alternative animation styles** you can apply to the **hover image** (the `.hover-reveal` div) using `GSAP` to make it more engaging and interactive:

---

### âœ… 1. **Smooth Scale + Fade In**

A more subtle entrance with a soft zoom and opacity:

```ts
gsap.to(revealRef.current, {
  x: clampedX,
  y: clampedY,
  scale: 1,
  opacity: 1,
  ease: "power3.out",
  duration: 0.6,
});
```

Before this, you can set the initial scale smaller on hover start:

```ts
gsap.set(revealRef.current, { scale: 0.85, opacity: 0 });
```

---

### âœ… 2. **Floating/Parallax Lag Effect**

Delays the imageâ€™s movement slightly behind the cursor for a fluid "magnetic" feel:

```ts
gsap.to(revealRef.current, {
  x: clampedX,
  y: clampedY,
  opacity: 1,
  ease: "power2.out",
  duration: 0.9,
});
```

Add a subtle `skewX`/`skewY` or `scale` change on move for more depth:

```ts
skewX: speed > 10 ? 5 : 0,
skewY: speed > 10 ? 2 : 0,
```

---

### âœ… 3. **Flip or Rotate on Hover**

Rotates the image in 3D as it appears. Add `transform-style: preserve-3d;` and perspective on a parent container.

```ts
gsap.to(revealRef.current, {
  rotationY: 15,
  x: clampedX,
  y: clampedY,
  opacity: 1,
  scale: 1,
  ease: "expo.out",
  duration: 1,
});
```

On mouse leave, revert it:

```ts
gsap.to(revealRef.current, { rotationY: 0, opacity: 0, duration: 0.5 });
```

---

### âœ… 4. **Clip Path Reveal**

You can reveal the hover image using a `clip-path` animation:

```ts
gsap.fromTo(
  revealRef.current,
  {
    clipPath: "circle(0% at 50% 50%)",
    opacity: 0,
  },
  {
    clipPath: "circle(70% at 50% 50%)",
    opacity: 1,
    duration: 0.6,
    ease: "power2.out",
  }
);
```

Make sure the element has `overflow: hidden;` and `will-change: clip-path`.

---

### âœ… 5. **Grayscale to Color Fade**

Start with grayscale or blurred and animate to full color:

```ts
gsap.fromTo(
  revealRef.current,
  {
    filter: "grayscale(100%) blur(8px)",
    opacity: 0,
  },
  {
    filter: "grayscale(0%) blur(0px)",
    opacity: 1,
    duration: 1,
    ease: "power3.out",
  }
);
```

This gives a modern and polished look.

---

### ðŸ“Œ Tip for Implementation

In your existing mousemove handler, assign:

```ts
const clampedX = gsap.utils.clamp(0, maxX, mousePos.x - 110);
const clampedY = gsap.utils.clamp(0, maxY, mousePos.y - 160);
```

Use that in the animations above for positioning, and wrap with `gsap.context()` as you're already doing.

---


